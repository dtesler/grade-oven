Grade Oven

What it is (from the top, down):
  A web server where instructors create assignments and students submit code.
  An assignment is a collection of directories, known as "stages", with arbitrary names and a plain text file called "stages" that lists the order the directory names should run in.
  Instructors register students, make assignments, etc.
  Students submit assignments.

Web page layout:
  login -> dashboard
  * -> logout
  dashboard -> settings, course[]
  settings -> update_avatar
  course -> assignment[]
  assignment -> submit
  logout -> login

Containers and Stages:
  Grade Oven uses a single Docker image to run every operation involved with an assignment (running the stages).
  When stages are run against a submitted assignment ("code"), the code unpacked in /grade_oven/submission
  Each stage has a main executable (such as a bash script) that "runs" the stage.
  Each stage is run in sequence inside the container.
  Each stage's directory is mounted under /grade_oven (e.g. "stage1" is under "/grade_oven/stage1") and is read-writable.  When the first stage is run, only the first stage directory is mounted.  When the Nth stage is run all stage directories up to and including N are mounted.
  Output is done during each stage by writing to /grade_oven/output/<filename>.
  /grade_oven/output/score should contain a score of the form "X/Y" (e.g. "99/100") to indicate that the submission scored X out of Y points.
  /grade_oven/output/status should contain a running log of logical steps that have happened and each line should be self-contained (e.g. if a stage represents a test-case, then "Test Case 3" would be a sensible status line)
  /grade_oven/output/progress should contain a progress of the form "X/Y" where X units of Y total units of work have been done.  (This is to show progress on the web page.)
  /grade_oven/output/errors should contain new-line separated errors that the students can see
  /grade_oven/output/debug should be used as a debugging log that is only readable/displayed_for the instructor.

Implementation (Outdated):
  Grade Oven (main.py):
    - calls coordinator.py
    - sets up logging
  Grade Oven Coordinator (coordinator.py):
    - Only component that doesn't run in a container, because it runs/communicates with them.
  Executor (Docker Wrapper executor.py):
    - exposes API in terms of what's required of containers at a high level (e.g. "build this", "run that")
    - make subprocess calls to docker binary to interact with docker
      - it'd use docker-py, but it doesn't work out of the box due to conflicting version numbers
    - hides docker details when possible
  Web Server (server.py):
    - Uses flask, containers, database, ssl
  Data Store (datastore.py):
    - Simple tuple-of-byte-strings to bytes store
    Possible API example (probably won't use this):
      # The following code does not assert False
      store = datastore.DataStore('filename.ds')
      key1 = ('courses', 'c++',    'assignments', 'homework 1')
      key2 = ('courses', 'c++',    'assignments', 'homework 2')
      key3 = ('courses', 'python', 'assignments', 'homework 1')
      store.put(key1, 'c++ 1')
      store.put(key2, 'c++ 2')
      store.put(key3, 'python 1')
      assert set(store.get_all(('courses',))) == set(['c++', 'python'])
      try:
        store.get(('courses',))
        assert False
      except datastore.MultipleValuesError:
        pass
      assert store.get(key1) == 'c++ 1'
      assert store.get(key3) == 'python 1'
      store.remove(('courses', 'c++'))
      assert set(store.get_all(('courses',))) == set(['python'])
      assert store.get(('courses',)) == 'python'  # generally usafe, but ok this time

